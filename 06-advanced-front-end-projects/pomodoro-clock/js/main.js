/* Babel transpiled, source code at 
https://raw.githubusercontent.com/Slitthe/pomodoro-clock/master/js/es6.js*/
"use strict"; function _classCallCheck(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") } var SOUNDS = { workOver: new Howl({ src: ["./media/complete.mp3"], volume: .5 }), workStart: new Howl({ src: ["./media/work.mp3"], volume: .4 }) }, Durations = function () { function t(e) { _classCallCheck(this, t), this.VISUALS = e.VISUALS, this.work = e.work, this.pause = e.pause, this.workDefault = e.work, this.pauseDefault = e.pause, this.current = {}, this.currentMax = this[e.startWithState], this.current._value = this[e.startWithState], Object.defineProperty(this.current, "value", { get: function () { return this._value }, set: function (t) { this._value = t, e.modifyCallback() } }) } return t.prototype.setToDefault = function () { this.work = this.workDefault, this.pause = this.pauseDefault, this.VISUALS.syncValues() }, t.prototype.checkEnd = function () { return this.current.value <= 0 }, t.prototype.setDurationToState = function (t) { this.currentMax = this[t], this.current.value = this[t] }, t.prototype.changeDurationOfType = function (t, e) { this[t] = e, $("#" + t).val(e) }, t.prototype.currentDurationChange = function (t) { this.current.value += t, this.current.value < 0 ? this.current.value = 0 : this.current.value = Math.floor(this.current.value), this.VISUALS.timeChange(this.current.value) }, t }(), Timer = function () { function e(t) { _classCallCheck(this, e), this.intervals = [], this.intervalCallback = t.intervalCallback, this.intervalDelay = t.intervalDelay } return e.prototype.reset = function () { this.intervals.forEach(function (t) { return clearInterval(t) }), this.intervals = [] }, e.prototype.start = function () { var t = setInterval(this.intervalCallback, this.intervalDelay); this.intervals.push(t) }, e }(), ANGLES = { stateMinMax: { work: { min: 225, max: 405 }, pause: { min: 45, max: 225 } }, changeAngleTo: function (t) { $(".spinner").css("transform", "rotateZ(" + t + "deg)") }, calcProgressAngle: function (t, e, i) { var s = 1 - t / e, r = (this.stateMinMax[i].max - this.stateMinMax[i].min) * s + this.stateMinMax[i].min; this.changeAngleTo(r) } }, TIME_HELPERS = { msToSeconds: function (t) { return Math.floor(t / 1e3) }, msToMinutes: function (t) { return Math.floor(t / 6e4) }, msFormatTime: function (t) { var e = this.msToMinutes(t), i = this.msToSeconds(t) % 60; return (e < 10 ? "0" : "") + e + ":" + (i < 10 ? "0" : "") + i }, calcModifyCurrentDuration: function (t, e) { var i = "increase" === t, s = e % 6e4; s = s || i ? s : 6e4; var r = i ? 6e4 - s : -s; return Math.abs(r) < 15e3 && (i ? r += 6e4 : r -= 6e4), r } }, VISUALS = { selfHelpers: { hideResume: function (t) { var e = t ? "resume" : "pause"; $("#pause-resume ." + (t ? "pause" : "resume")).removeClass("hide"), $("#pause-resume ." + e).addClass("hide") }, disableSkip: function (t) { $("#remove-cr-timer, #add-cr-timer, #skip").attr("disabled", t) }, updateTime: function (t) { $("#cr-timer").text(t) } }, start: function (t) { $(".pomo-container").attr("data-active-state", t), this.selfHelpers.disableSkip(null) }, pause: function () { this.selfHelpers.hideResume(!1) }, resume: function () { this.selfHelpers.hideResume(!0), VISUALS.syncValues() }, reset: function () { $(".pomo-container").attr("data-timer-running", "false"), $(".pomo-container").attr("data-active-state", ""), this.selfHelpers.updateTime(""), this.selfHelpers.disableSkip("disabled"), this.selfHelpers.hideResume(!1) }, stateSwitch: function (t) { $(".pomo-container").attr("data-active-state", t) }, startStop: function (t) { t && $(".pomo-container").attr("data-timer-running", "true") }, skip: function (t) { $("#cr-timer").text(TIME_HELPERS.msFormatTime(t)) }, syncValues: function () { var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : POMO.durations.work, e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : POMO.durations.pause; $("#modifiy-timers #work-duration").val(TIME_HELPERS.msToMinutes(t)), $("#modifiy-timers #pause-duration").val(TIME_HELPERS.msToMinutes(e)), $(".faux-input").each(function (t, e) { $(e).find(".input-display").text($(e).find("input").val()) }) }, timeChange: function (t) { this.selfHelpers.updateTime(TIME_HELPERS.msFormatTime(t)) }, resetProgressDisplay: function () { POMO.durations.currentMax = POMO.durations.current.value, POMO.durations.current.value = POMO.durations.current.value } }, POMO = { isActive: !1, isTimerRunning: !1, totalWorkTime: 0, totalWorkPeriods: 0, durations: new Durations({ work: 15e5, pause: 3e5, startWithState: "work", modifyCallback: function () { ANGLES.calcProgressAngle(POMO.durations.current.value, POMO.durations.currentMax, POMO.states.current) }, VISUALS: VISUALS }), states: { current: "work", types: ["work", "pause"], switch: function () { var t = this.types.indexOf(this.current); this.current = this.types[!t + 0], VISUALS.stateSwitch(this.current) } }, start: function () { this.timer.reset(), this.durations.setDurationToState(this.states.current), this.resume(), VISUALS.start(this.states.current) }, reset: function () { this.durations.setToDefault(), this.timer.reset(), this.isTimerRunning = !1, "pause" === this.states.current && this.states.switch(), VISUALS.reset() }, pause: function () { this.setActiveStateTo(!1), this.timer.reset(), VISUALS.pause() }, pauseResumeToggle: function () { this.isTimerRunning ? this.isActive ? this.pause() : this.resume() : (this.isTimerRunning = !0, this.start(), VISUALS.startStop(!0)) }, resume: function () { this.setActiveStateTo(!0), this.timer.start(), VISUALS.resume() }, skip: function () { this.pause(), this.states.switch(), this.durations.setDurationToState(this.states.current), this.isActive && this.start(), VISUALS.skip(this.durations[this.states.current]) }, setActiveStateTo: function (t) { this.isActive = t }, timer: new Timer({ intervalDelay: 1e3, intervalCallback: function () { POMO.states.current; var t = "work" === POMO.states.current; POMO.durations.currentDurationChange(-1e3), t && (POMO.totalWorkTime += 1e3), POMO.durations.checkEnd() && (t ? (POMO.totalWorkPeriods++ , SOUNDS.workOver.play()) : SOUNDS.workStart.play(), POMO.skip(), POMO.start()) } }) }, init = function () { VISUALS.syncValues(); var i = function (t, e) { var i = Number(t.getAttribute("min")), s = Number(t.getAttribute("max")), r = Number(t.value) + e; i <= r && r <= s && (t.value = Number(t.value) + e) }, e = function (t, e) { t = $(t).siblings("input")[0], i(t, e ? 1 : -1), function (t) { if (1 <= $(t).val() && $(t).val() <= 90) { var e = $(t).attr("data-duration-for"), i = parseInt($(t).val()); POMO.durations.changeDurationOfType(e, 6e4 * i) } }(t), VISUALS.syncValues() }, t = function (t) { var e = t ? "increase" : "decrease", i = TIME_HELPERS.calcModifyCurrentDuration(e, POMO.durations.current.value); POMO.pause(), POMO.durations.currentDurationChange(i), VISUALS.resetProgressDisplay() }; $("#pause-resume").on("click", POMO.pauseResumeToggle.bind(POMO)), $("#skip").on("click", POMO.skip.bind(POMO)), $("#start").on("click", POMO.start.bind(POMO)), $("#reset").on("click", POMO.reset.bind(POMO)), $(".time-display .increment").on("click", function () { return t(!0) }), $(".time-display .decrement").on("click", function () { return t(!1) }), $(".change-timer .increment").on("click", function (t) { return e(t.currentTarget, !0) }), $(".change-timer .decrement").on("click", function (t) { return e(t.currentTarget, !1) }) }; $(document).ready(init);